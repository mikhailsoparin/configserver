spring:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    database: POSTGRESQL
    show-sql: true
  datasource:
    platform: postgres
    testWhileIdle: true
    validationQuery: SELECT 1
  database:
    driverClassName: org.postgresql.Driver
  cloud:
    stream:
      bindings:
        output:                                         #<-- maps the source output channel to the topic and tells that messages should be serialized as JSON
          destination: orgChangeTopic                   #<-- the name of the topic to which we are going to publish messages
          content-type: application/json                #<-- gives a hint to Spring Cloud Stream of what type of message is going to be sent/received
      kafka:                                            #<-- tells Spring to bind service to kafka
        binder:
          zkNodes: kafkaserver                          #<-- tells Spring Cloud Stream the network location of the Kafka and ZooKeeper
          brokers: kafkaserver
  sleuth:
    sampler:
      percentage: 1                                     #<-- sets that 100% of the traffic should be sent to Zipkin server
  zipkin:
    baseUrl: zipkin:9411

server:
  port: 8081

management:
  endpoints:
    web:
      exposure:
        include: "*"
    enabled-by-default: true
eureka:
  instance:
    preferIpAddress: true                               #<-- register the IP of the service rather than its hostname. Important in container 
                                                        # based environemtns since containers will be started with randomly generated hostnames and
                                                        # no DNS entries for the containers, therefore client applications won't be able to correctly
                                                        # resolve the location of the hostnames
  client:
    registerWithEureka: true                            #<-- register the service with Eureka
    fetchRegistry: true                                 #<-- pull down a local copy of the registry, so you don't need to call Eureka for 
                                                        # every lookup. Every 30 seconds, client will re-contact the Eureka for any changes
    serviceUrl:
      defaultZone: http://eurekaserver:8070/eureka/     #<-- comma separated list of Eureka Services the client will use to resolve to service locations

security:
  oauth2:
    resource:
      userInfoUri: http://authenticationservice:8082/user

signing.key: "345345fsdfsf5345"