example.property=I AM THE DEFAULT

spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=true
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8070/eureka/

#minimumnumber of calls that must occur within a 10-second window
hystrix.command.getLicensesCommand.circuitBreaker.requestVolumeThreshold=10
#percentage of the calls that must fail
hystrix.command.getLicensesCommand.circuitBreaker.errorThresholdPercentage=75
#the amount of time Hystrix will sleep once the circuit breaker is tripped before allowing a call through
hystrix.command.getLicensesCommand.circuitBreaker.sleepWindowInMilliseconds=7000
#the size of the window that will be used by Hystrix to monitor problems (10 sec by default)
hystrix.command.getLicensesCommand.metrics.rollingStats.timeInMilliseconds=15000
#number of times statistics are collected in the window defined above. Over 15 seconds Hystrix will collect
#stats into 5 buckets, each 3-second long. The more we collect stats the more CPU will be used
hystrix.command.getLicensesCommand.metrics.rollingStats.numBuckets=5
#defines maximum number of threads in a threadpool
hystrix.threadpool.getLicensesServiceThreadPool.coreSize=30
#defines a queue that sits in front of the threadpool and can queue incoming requests. When queue is full
#additional requests to the threadpool will fail until there is a room in the queue. If we set the value to -1
#a Java SynchronousQueue will be used to hold all incoming requests. It enforces that we can never have more
#requests in process than the number of threads available in the thread pool.
hystrix.threadpool.getLicensesServiceThreadPool.maxQueueSize=10

security.oauth2.resource.userInfoUri= http://authenticationservice:8082/user
security.oauth2.client.grant-type = client_credentials

signing.key = 345345fsdfsf5345

#maps the Sink.INPUT channel to the orgChangeTopic queue
spring.cloud.stream.bindings.inboundOrgChanges.destination=orgChangeTopic
spring.cloud.stream.bindings.inboundOrgChanges.content-type=application/json
#defines the name of the consumer group that will be consuming the message. Guarantees process-once semantics for a service, since we can have
#multiple instances of the same service, we want only one instance of the service to process each messages
spring.cloud.stream.bindings.inboundOrgChanges.group=licensingGroup
spring.cloud.stream.kafka.binder.zkNodes=localhost
spring.cloud.stream.kafka.binder.brokers=localhost